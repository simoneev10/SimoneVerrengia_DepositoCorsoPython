def introduzionePython():
    print("\nPython è un linguaggio di programmazione ad alto livello, interpretato e orientato agli oggetti.")
    print("-Alto livello: significa che è più vicino al linguaggio umano rispetto ai linguaggi di basso livello come l'assembly.")
    print("-Interpretato: significa che il codice viene eseguito riga per riga, senza bisogno di una fase di compilazione separata.")
    print("-Orientato agli oggetti: significa che supporta la programmazione orientata agli oggetti, consentendo di creare classi e oggetti.")
    print("\nLa principale caratteristica di Python è la 'flessibilità'. Questo possiamo vederlo nel tipo di dati, poichè non è necessario dichiarare il tipo di variabile, ma viene assegnato automaticamente in base al valore che gli viene dato.")
    print("Inoltre, Python è un linguaggio 'multi-paradigma', il che significa che supporta diversi paradigmi di programmazione, tra cui la programmazione imperativa, funzionale e orientata agli oggetti.")
    print("\nUn'altra caratteristica importante è l'indentazione. In Python, l'indentazione è fondamentale per definire i blocchi di codice. Non ci sono parentesi graffe come in altri linguaggi di programmazione.")
    print("\nEsso ha quattro regole fondamentali:")
    print("1) Incapsulamento: i dati e le funzioni sono incapsulati in oggetti, questo ci è molto chiaro vedendo l'esmpio print(1+2).")
    print("2) Ereditarietà: le classi possono ereditare attributi e metodi da altre classi.")
    print("3) Polimorfismo: gli oggetti possono essere trattati come istanze della loro classe base.")
    print("4) Astrazione: le classi possono nascondere i dettagli di implementazione e mostrare solo le funzionalità essenziali.")

def variabili():
    print(f"\nLe variabili sono dei contenitori per un valore. Vengono assegnate tramite = e devono soddisfare le seguenti condizioni: \n")
    print("1) Non possono avere spazi")
    print("2) Possono includere solo lettere, numeri e underscore")
    print("3) Devono iniziare con una lettera o un underscore")
    print("\nI principali tipi di Python sono: ")
    print("(Int) Numeri Interi --> Essi sono interi positivi o negativi senza parte frazionaria\nx = 10\n")
    print("(Float) Numeri in Virgola Mobile --> Essi sono numeri con una parte frazionaria\ny = 1.23\n")
    print("(Str) Stringhe --> Esse sono squenze di caratteri. Possono contere lettere, numeri, simboli speciali e spazi vuoti. Possono essere racchiuse tra virgolette singole ('') o doppie ("")\nnome = 'Simone'\ncognome = \"Verrengia\"")
    print("Si può accedere ai caratteri di una stringa utilizzando gli indici:\nprint(nome[0]) #Output: S")
    print("Sulle stringhe può essere anche utilizzato l'operatore + per concatenarle.\nprint(nome + cognome) # Output: Simone Verrengia")
    print("\nPython fornisce una vasta serie di metodi incorporati per manipolare e lavorare con le stringhe.\nx = 'Ciao, simone'")
    x = 'Ciao, simone'
    print(len(x))
    print(x.upper())
    print(x.split(','))
    print(x.replace('simone','mirko'))
    print("Questi sono i metodi utilizzati:")
    print("print(len(x)) # Restituisce la lunghezza della stringa")
    print("print(x.upper()) # Converte tutti i caratteri della stringa in maiuscolo")
    print("print(x.split(',')) # Divide la stringa in una lista utilizzando la virgola come delimitatore")
    print("print(x.replace('simone','mirko')) # Sostituisce 'simone' con 'mirko' nella stringa")
    print("\n(Bool) Booleani --> Essi rappresentano valori di verità. Possono essere True o False.\n")
    print("Esempi di utilizzo dei booleani:")
    print("a = True")
    print("b = False")
    print("\nI booleani sono spesso utilizzati in espressioni condizionali e cicli.")
    print("Esempio:")
    print("x = 10\ny = 20")
    print("print(x > y) # Output: False")
    print("print(x < y) # Output: True")
    print("\nPython fornisce operatori logici per lavorare con i booleani:")
    print("and, or, not")
    print("Esempi:")
    print("print(True and False) # Output: False")
    print("print(True or False) # Output: True")
    print("print(not True) # Output: False")
    
def struttureDati():
    print("\nLe strutture dati sono modi per organizzare e memorizzare i dati in modo che possano essere utilizzati in modo efficiente.")
    print("Le principali strutture dati in Python sono:")
    print("1) Liste")
    print("2) Tuple")
    print("3) Dizionari")
    print("4) Insiemi")
    
    print("\n(Liste) Le liste sono collezioni ordinate e mutabili di elementi. Possono contenere elementi di tipi diversi.\n")
    print("Esempio di lista:")
    print("frutti = ['mela', 'banana', 'ciliegia']")
    frutti = ['mela', 'banana', 'ciliegia']
    print(frutti)
    print("\nSi può accedere agli elementi di una lista utilizzando gli indici:")
    print("print(frutti[0]) # Output: mela")
    print("print(frutti[-1]) # Output: ciliegia (indice negativo)")
    print("\nLe liste sono mutabili, quindi è possibile modificarne gli elementi:")
    frutti[1] = 'arancia'
    print("frutti[1] = 'arancia'")
    print(frutti)
    print("\nPython fornisce diversi metodi per lavorare con le liste:")
    frutti.append('kiwi')
    print("frutti.append('kiwi') # Aggiunge un elemento alla fine della lista")
    print(frutti)
    frutti.remove('mela')
    print("frutti.remove('mela') # Rimuove un elemento specifico dalla lista")
    print(frutti)
    frutti.pop()
    print("frutti.pop() # Rimuove l'ultimo elemento della lista")
    print(frutti)
    frutti.sort()
    print("frutti.sort() # Ordina la lista in ordine crescente")
    print(frutti)
    frutti.insert(1, 'fragola')
    print("frutti.insert(1, 'fragola') # Inserisce un elemento in una posizione specifica della lista")
    print(frutti)
    print("\nPython consente anche di utilizzare l'operatore * come operatore di 'splat' per espandere una lista in singoli elementi:")
    print("Esempio:")
    print("numeri = [*range(1, 11)]")
    numeri = [*range(1, 11)]
    print("print(*numeri) # Output: 1 2 3 4 5 6 7 8 9 10")
    print("\nQuesti sono i metodi e operatori utilizzati:")
    print("append() - Aggiunge un elemento alla fine della lista")
    print("remove() - Rimuove un elemento specifico dalla lista")
    print("pop() - Rimuove l'ultimo elemento della lista")
    print("sort() - Ordina la lista in ordine crescente")
    print("insert() - Inserisce un elemento in una posizione specifica della lista")
    print("* - Operatore splat per espandere o concatenare liste")
    
    print("\n(Tuple) Le tuple sono collezioni ordinate e immutabili di elementi.\n")
    print("Esempio di tupla:")
    print("numeri = (1, 2, 3, 4)")
    numeri = (1, 2, 3, 4)
    print(numeri)
    print("\nSi può accedere agli elementi di una tupla utilizzando gli indici:")
    print("print(numeri[0]) # Output: 1")
    print("print(numeri[-1]) # Output: 4 (indice negativo)")
    print("\nLe tuple sono immutabili, quindi non è possibile modificarne gli elementi.")
    print("Tuttavia, è possibile concatenare tuple per crearne di nuove:")
    nuova_tupla = numeri + (5, 6)
    print("nuova_tupla = numeri + (5, 6)")
    print(nuova_tupla)
    
    print("\n(Dizionari) I dizionari sono collezioni non ordinate di coppie chiave-valore.\n")
    print("Esempio di dizionario:")
    print("studente = {'nome': 'Simone', 'età': 25, 'corso': 'Python'}")
    studente = {'nome': 'Simone', 'età': 25, 'corso': 'Python'}
    print(studente)
    print("\nSi può accedere ai valori di un dizionario utilizzando le chiavi:")
    print("print(studente['nome']) # Output: Simone")
    print("\nI dizionari sono mutabili, quindi è possibile aggiungere, modificare o rimuovere elementi:")
    studente['età'] = 26
    print("studente['età'] = 26")
    print(studente)
    studente['città'] = 'Roma'
    print("studente['città'] = 'Roma'")
    print(studente)
    del studente['corso']
    print("del studente['corso']")
    print(studente)
    
    print("\n(Insiemi) Gli insiemi sono collezioni non ordinate di elementi unici.\n")
    print("Esempio di insieme:")
    print("numeri = {1, 2, 3, 4, 4}")
    numeri = {1, 2, 3, 4, 4}
    print(numeri)  # Output: {1, 2, 3, 4} (gli elementi duplicati vengono rimossi automaticamente)
    print("\nGli insiemi supportano operazioni matematiche come unione, intersezione e differenza:")
    insieme_a = {1, 2, 3}
    insieme_b = {3, 4, 5}
    print("Unione: insieme_a | insieme_b =", insieme_a | insieme_b)
    print("Intersezione: insieme_a & insieme_b =", insieme_a & insieme_b)
    print("Differenza: insieme_a - insieme_b =", insieme_a - insieme_b)

def operatori():
    print("\nGli operatori in Python sono simboli che eseguono operazioni su variabili e valori.")
    print("I principali operatori in Python sono:")
    print("1) Operatori Aritmetici")
    print("Esempi:")
    print("x = 10")
    print("y = 3")
    print("print(x + y)  # Somma: Output 13")
    print("print(x - y)  # Sottrazione: Output 7")
    print("print(x * y)  # Moltiplicazione: Output 30")
    print("print(x / y)  # Divisione: Output 3.333...")
    print("print(x // y) # Divisione intera: Output 3")
    print("print(x % y)  # Modulo (resto): Output 1")
    print("print(x ** y) # Potenza: Output 1000")

    print("\n2) Operatori di Confronto")
    print("Esempi:")
    print("x = 10")
    print("y = 3")
    print("print(x == y)  # Uguale a: Output False")
    print("print(x != y)  # Diverso da: Output True")
    print("print(x > y)   # Maggiore di: Output True")
    print("print(x < y)   # Minore di: Output False")
    print("print(x >= y)  # Maggiore o uguale a: Output True")
    print("print(x <= y)  # Minore o uguale a: Output False")

    print("\n3) Operatori Logici")
    print("Esempi:")
    print("a = True")
    print("b = False")
    print("print(a and b)  # AND logico: Output False")
    print("print(a or b)   # OR logico: Output True")
    print("print(not a)    # NOT logico: Output False")

def controlloFlusso():
    print("\nIl controllo del flusso in Python consente di eseguire diverse azioni in base a condizioni specifiche.")
    print("Le principali strutture di controllo del flusso sono:")
    print("1) If-Else")
    print("2) Cicli (for, while)")
    print("3) Range()")
    print("4) Match (Pattern Matching)")
    print("\n1) If-Else")
    print("Esempio:")
    print("x = 10")
    print("if x > 5:")
    print("    print('x è maggiore di 5')")
    print("else:")
    print("    print('x è minore o uguale a 5')")
    print("\n2) Cicli")
    print("Esempio di ciclo for:")
    print("for i in range(5):")
    print("    print(i)  # Stampa i numeri da 0 a 4")
    print("\nEsempio di ciclo while:")
    print("i = 0")
    print("while i < 5:")
    print("    print(i)")
    print("    i += 1  # Incrementa i di 1")
    print("\nI cicli possono essere interrotti con le istruzioni break e continue. \nIstruzione break interrompe il ciclo, mentre continue salta l'iterazione corrente e passa alla successiva.")
    print("\nIstruzione break e continue")
    print("break interrompe il ciclo, mentre continue salta l'iterazione corrente e passa alla successiva.")
    print("Esempio:")
    print("for i in range(5):")
    print("    if i == 2:")
    print("        break  # Interrompe il ciclo quando i è uguale a 2")
    print("    print(i)  # Stampa i numeri da 0 a 1")
    print("\nEsempio con continue:")
    print("for i in range(5):")
    print("    if i == 2:")
    print("        continue  # Salta l'iterazione quando i è uguale a 2")
    print("    print(i)  # Stampa i numeri da 0 a 4, tranne 2")
    print("\nEsempio con pass:")
    print("for i in range(5):")
    print("    if i == 2:")
    print("        pass  # Non fa nulla, il ciclo continua normalmente")
    print("    print(i)  # Stampa i numeri da 0 a 4")
    print("\n3) range():")
    print("range() è una funzione che genera una sequenza di numeri. Può essere utilizzata con uno, due o tre argomenti:")
    print("range(stop): genera numeri da 0 a stop-1")
    print("range(start, stop): genera numeri da start a stop-1")
    print("range(start, stop, step): genera numeri da start a stop-1 con un passo specificato")
    print("Esempi:")
    print("for i in range(5):")
    print("    print(i)  # Output: 0, 1, 2, 3, 4")
    print("for i in range(2, 6):")
    print("    print(i)  # Output: 2, 3, 4, 5")
    print("for i in range(1, 10, 2):")
    print("    print(i)  # Output: 1, 3, 5, 7, 9")
    print("\n4) Match (Pattern Matching)")
    print("Il pattern matching è una funzionalità introdotta in Python 3.10 che consente di confrontare un valore con una serie di modelli e di eseguire un'azione in base al primo modello corrispondente.")
    print("Esempio:")
    print("def controllo_valore(x):")
    print("    match x:")
    print("        case 1:")
    print("            print('Il valore è 1')")
    print("        case 2:")
    print("            print('Il valore è 2')")
    print("        case _:")
    print("            print('Valore non riconosciuto')")
    print("\nIn questo esempio, il valore di x viene confrontato con i modelli specificati nei case.")
    print("Il simbolo _ rappresenta un caso predefinito, simile a 'else' nelle istruzioni if-else.")
    print("Esempio di utilizzo:")
    print("controllo_valore(1)  # Output: Il valore è 1")
    print("controllo_valore(3)  # Output: Valore non riconosciuto")

def funzioni():
    print("\nLe funzioni sono blocchi di codice riutilizzabili che eseguono un'operazione specifica.")
    print("Le funzioni possono essere definite utilizzando la parola chiave def seguita dal nome della funzione e da parentesi tonde con eventuali parametri.")
    print("Esse sono di due tipi:")
    print("1) Funzioni che restituiscono un valore")
    print("2) Funzioni che non restituiscono un valore")
    print("\nEsempio di funzione che restituisce un valore:")
    print("def somma(a, b):")
    print("    return a + b")
    print("result = somma(2, 3)")
    print("print(result)  # Output: 5")
    print("\nEsempio di funzione che non restituisce un valore:")
    print("def stampa_messaggio(messaggio):")
    print("    print(messaggio)")
    print("stampa_messaggio('Ciao!')  # Output: Ciao!")
    print("\nLe funzioni possono anche avere parametri predefiniti, che vengono utilizzati se non viene fornito un valore per quel parametro.")
    print("Esempio:")
    print("def saluto(nome='Simone'):")
    print("    print(f'Ciao, {nome}!')")
    print("saluto()  # Output: Ciao, Simone!")
    print("saluto('Mirko')  # Output: Ciao, Mirko!\n")

def decoratori():
    print("\nI decoratori sono una funzionalità avanzata di Python che consente di modificare o estendere il comportamento di funzioni o metodi senza modificarne il codice sorgente.")
    print("Essi sono funzioni che accettano un'altra funzione come argomento e restituiscono una nuova funzione.")
    print("I decoratori sono spesso utilizzati per aggiungere funzionalità come la registrazione, la misurazione del tempo di esecuzione o l'autenticazione.")
    print("Si applicano utilizzando il simbolo @ seguito dal nome del decoratore sopra la definizione della funzione.")
    print("\nEsempio di decoratore:")
    print("def decoratore_con_argomenti(funzione):")
    print("    def wrapper(*args, **kwargs):")
    print("        print('Prima dell'esecuzione della funzione')")
    print("        risultato = funzione(*args, **kwargs)")
    print("        print('Dopo l'esecuzione della funzione')")
    print("        return risultato + 2")
    print("    return wrapper")
    print("\n@decoratore_con_argomenti")
    print("def somma(a, b):")
    print("    print(f'Somma: {a + b}')")
    print("    return a + b")
    print("\nprint('Il risultato è:', somma(3, 4))")
    print("\nIn questo esempio, il decoratore decoratore_con_argomenti aggiunge funzionalità prima e dopo l'esecuzione della funzione somma.")
    print("Il risultato finale della somma viene restituito e incrementato di 2 dal decoratore.")
    print("\nIl wrapper è una funzione interna definita all'interno del decoratore che avvolge la funzione originale.")
    print("Permettendo di aggiungere funzionalità extra prima e dopo l'esecuzione della funzione decorata senza modificarne il codice sorgente.")
    print("\nEsempio di decoratore logger:")
    print("def logger(funzione):")
    print("    def wrapper(*args, **kwargs):")
    print("        print(f\"Chiamata a {funzione.__name__} con argomenti: {args} e {kwargs}\")")
    print("        risultato = funzione(*args, **kwargs)")
    print("        print(f\"Risultato di {funzione.__name__}: {risultato}\")")
    print("        return risultato")
    print("    return wrapper")
    print("\n@logger")
    print("def moltiplica(a, b):")
    print("    return a * b")
    print("\n# Chiamata alla funzione decorata")
    print("print(moltiplica(3, 4))")
    print("\nIn questo esempio, il decoratore logger registra le informazioni sulla chiamata della funzione e il risultato.")
    print("Qui possiamo notare il ruole del wrapper: ")
    print("può modificare gli argomenti passati alla funzione originale, eseguire codice prima e dopo la chiamata della funzione originale e restituire il risultato della funzione originale.")
    print("utilizza in genere *args e **kwargs per accettare un numero variabile di argomenti e keyword arguments mantenendo la flessibilità.")
    
def menu():
        print("\n" + "*" * 50)
        print("Benvenuto nel programma di Recap di Simone!".center(50))
        print("Scegli quale argomento ripassare:".center(50))
        print("*" * 50)
        print("1) Introduzione a Python")
        print("2) Variabili")
        print("3) Strutture Dati")
        print("4) Operatori")
        print("5) Controllo del Flusso")
        print("6) Funzioni")
        print("7) Decoratori")
        print("8) Esci")
        
        scelta = input("Inserisci il numero della tua scelta: ")
        
        if scelta == "1":
            introduzionePython()
        elif scelta == "2":
            variabili()
        elif scelta == "3":
            struttureDati()
        elif scelta == "4":
            operatori()
        elif scelta == "5":
            controlloFlusso()
        elif scelta == "6":
            funzioni()
        elif scelta == "7":
            decoratori()
        elif scelta == "8":
            print("Uscita dal programma.")
        else:
            print("Scelta non valida. Riprova.")
            menu()

menu()    